#!/usr/bin/env python

from mechanize import Browser
from HTMLParser import HTMLParser
from optparse import OptionParser
import datetime
import os
import sys
import re
import string
import logging

class MyTableParser(HTMLParser):
    def __init__(self):
	self.intable = 0
	self.incell = 0
	self.inrow = 0
	self.rowdata = []
	self.tabledata = []
	HTMLParser.__init__(self)
    def handle_starttag(self, tag, attrs):
	if tag == 'table':
	    self.intable = 1
	if tag == 'tr':
	    self.inrow = 1
	if tag == 'td':
	    self.incell = 1
    def handle_data(self, data):
	if self.incell == 1:
	    self.rowdata.append(string.strip(data))
    def handle_endtag(self, tag):
	if tag == 'table':
	    self.intable = 0
	if tag == 'tr':
	    self.inrow = 0
	    self.tabledata.append(self.rowdata)
	    self.rowdata = []
	if tag == 'td':
	    self.incell = 0

class MlnFetcher(object):
    urlbase = "https://library.minlib.net"
    def __init__(self, account, pin):
	super(MlnFetcher, self).__init__()
	self.account = account
	self.pin = pin
    def fetch(self):
	br = Browser()
	br.set_handle_robots(False)	# Don't worry about robots.txt for this.
	response = br.open(MlnFetcher.urlbase + "/patroninfo/")
	assert br.viewing_html()
	br.select_form(nr = 0)
	br["code"] = self.account
	br["pin"] = self.pin

	response = br.submit()
	data = response.read()

        # If there are no books checked out, and there are fines,
        # then punt.

        if data.find("0 Items currently checked out") >= 0 and data.find("FINES") >= 0:
            return [(datetime.datetime.today(), "THERE ARE FINES")]
        

	# The HTML on this page isn't very good, so we pull out
	# the important table with a regexp, and then parse the HTML.

	match = re.search('\<table[^>]*patFunc".*</table>', data, re.DOTALL)
        
	booklist = []
        if match != None:
            parser = MyTableParser()
            input = match.group(0).replace("& ", "and ")
            parser.feed(input)

            for book in parser.tabledata[1:]:
                title = string.split(book[0], '/')[0].strip()
                logging.debug("Book info: %s" % str(book))
                xdate = book[4].split()[1].split('-')
                year = xdate[2][0:2]
		logging.debug("xdate %s year %s" % (xdate, year))
                duedate = datetime.datetime(2000 + int(year), int(xdate[0]),
                                            int(xdate[1]))
		logging.debug("Book parsed: %s %s" % (duedate, title))
                booklist.append((duedate, title))
	return booklist

# Config file is one account per line, no comments.
# name account# pin

def read_config(filename):
    accounts = []
    f = open(filename)
    for x in f.readlines():
	acct = x.split()
	accounts.append(acct)
    return accounts

def compareNames(book1, book2):
    (duedate1, title1) = book1
    (duedate2, title2) = book2
    return cmp(title1, title2)

def compareDates(book1, book2):
    (duedate1, title1) = book1
    (duedate2, title2) = book2
    if duedate1 < duedate2:
	return -1
    if duedate1 == duedate2:
	return 0
    return 1

def main():
    usage = "%prog [options]"
    defaultconfig = ".mln.conf"
    config = os.getenv("HOME") + "/" + defaultconfig
    cmdparser = OptionParser(usage)
    cmdparser.add_option("-w", "--warn", type="int", dest="warndays",
			help="Print warning for books due in N days", default=100)
    cmdparser.add_option("-d", "--by-date", action="store_true", dest="bydate",
                         help="Sort list by due date", default=True)
    cmdparser.add_option("-n", "--by-name", action="store_false", dest="bydate",
                         help="Sort list by name")
    cmdparser.add_option("-c", "--config", type="string", dest="config",
			help="Configuration file to use; default is ~/" +
			defaultconfig, default=config)
    cmdparser.add_option("-z", "--debug", action="store_true", dest="debug",
                         help="Enable debugging", default=False)
    
    (options, args) = cmdparser.parse_args()
    if len(args) != 0:
	cmdparser.error("Unknown arguments")
    if options.debug:
        logging.basicConfig(level=logging.DEBUG)

    accounts = read_config(options.config)
    for acct in accounts:
	fetcher = MlnFetcher(acct[1], acct[2])
	# Print by  name
	print acct[0]
	print "----------"
	booklist = fetcher.fetch()
	logging.debug(booklist)
	if options.bydate:
	    booklist.sort(compareDates)
	else:
	    booklist.sort(compareNames)
	for book in booklist:
	    (duedate,title) = book
	    now = datetime.datetime.today()
	    if duedate - now < datetime.timedelta(options.warndays):
		print duedate.strftime('%m/%d/%Y'), title
	print ""

if __name__ == "__main__":
    main()
