#!/usr/bin/env python

from mechanize import Browser
from HTMLParser import HTMLParser
from optparse import OptionParser
import datetime
import os
import sys
import sre
import string

class MyTableParser(HTMLParser):
    def __init__(self):
	self.intable = 0
	self.incell = 0
	self.inrow = 0
	self.rowdata = []
	self.tabledata = []
	HTMLParser.__init__(self)
    def handle_starttag(self, tag, attrs):
	if tag == 'table':
	    self.intable = 1
	if tag == 'tr':
	    self.inrow = 1
	if tag == 'td':
	    self.incell = 1
    def handle_data(self, data):
	if self.incell == 1:
	    self.rowdata.append(string.strip(data))
    def handle_endtag(self, tag):
	if tag == 'table':
	    self.intable = 0
	if tag == 'tr':
	    self.inrow = 0
	    self.tabledata.append(self.rowdata)
	    self.rowdata = []
	if tag == 'td':
	    self.incell = 0

class MlnFetcher(object):
    urlbase = "https://library.minlib.net"
    def __init__(self, account, pin):
	super(MlnFetcher, self).__init__()
	self.account = account
	self.pin = pin
    def fetch(self):
	br = Browser()
	br.set_handle_robots(False)	# Don't worry about robots.txt for this.
	response = br.open(MlnFetcher.urlbase + "/patroninfo/")
	assert br.viewing_html()
	br.select_form(nr = 0)
	br["code"] = self.account
	br["pin"] = self.pin

	br.submit()
	link = br.find_link(text_regex=r"checked out").url
	response = br.open(MlnFetcher.urlbase + link)
	data = response.read()

	# The HTML on this page isn't very good, so we pull out
	# the important table with a regexp, and then parse the HTML.

	match = sre.search('\<table[^>]*patFunc".*</table>', data, sre.DOTALL)
	parser = MyTableParser()
	parser.feed(match.group(0))

	booklist = []
	for book in parser.tabledata[1:]:
	    title = string.split(book[0], '/')[0].strip()
	    xdate = book[4].split()[1].split('-')
	    duedate = datetime.datetime(2000 + int(xdate[2]), int(xdate[0]),
					int(xdate[1]))
	    booklist.append((duedate, title))
	return booklist

# Config file is one account per line, no comments.
# name account# pin

def read_config(filename):
    accounts = []
    f = open(filename)
    for x in f.readlines():
	acct = x.split()
	accounts.append(acct)
    return accounts

def main():
    usage = "%prog [options]"
    defaultconfig = ".mln.conf"
    config = os.getenv("HOME") + "/" + defaultconfig
    cmdparser = OptionParser(usage)
    cmdparser.add_option("-w", "--warn", type="int", dest="warndays",
			help="Print warning for books due in N days", default=100)
    #cmdparser.add_option("-t", "--by-time", action="store_true", dest="bytime",
    #help="Sort list by due date", default=True)
    #cmdparser.add_option("-n", "--by-name", action="store_true", dest="byname",
    #help="Sort list by due date", default=False)
    cmdparser.add_option("-c", "--config", type="string", dest="config",
			help="Configuration file to use; default is ~/" +
			defaultconfig, default=config)
    (options, args) = cmdparser.parse_args()
    if len(args) != 0:
	parser.error("Unknown arguments")

    accounts = read_config(options.config)
    for acct in accounts:
	fetcher = MlnFetcher(acct[1], acct[2])
	# Print by  name
	print acct[0]
	print "----------"
	for book in fetcher.fetch():
	    (duedate,title) = book
	    now = datetime.datetime.today()
	    if duedate - now < datetime.timedelta(options.warndays):
		print duedate.strftime('%m/%d/%Y'), title
	print ""

if __name__ == "__main__":
    main()
